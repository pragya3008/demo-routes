{"version":3,"sources":["Welcome/Welcome.js","Employee/Employee.js","Employee/ForgotPassword.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","id","href","Component","Routes","exact","path","component","Employee","ForgotPassword","App","state","appName","home","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAaeA,E,iLARf,OACA,6BACI,wBAAIC,GAAG,eAAP,gBACA,uBAAGC,KAAK,mBAAR,6B,GALkBC,aCYPH,E,iLAVf,OACA,6BACI,wBAAIC,GAAG,eAAP,iBACA,uBAAGC,KAAK,mBAAR,wBACA,6BACA,uBAAGA,KAAK,KAAR,qB,GAPkBC,aCYPH,E,iLAVf,OACA,6BACI,wBAAIC,GAAG,eAAP,wBACA,uBAAGC,KAAK,aAAR,aACA,6BACA,uBAAGA,KAAK,UAAR,sB,GAPkBC,aCcHC,EAVJ,kBACX,kBAAC,IAAD,KACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,WAAWC,UAAWP,IACxC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,YAAYC,UAAWC,IACzC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,kBAAkBC,UAAWE,OCWpCC,E,YAnBf,aAAc,IAAD,8BACb,+CACKC,MAAM,CACXC,QAAS,gCACTC,MAAM,GAJO,E,sEAQb,OACA,yBAAKC,UAAU,sBACf,+CACA,kBAAC,EAAD,MACA,6BACA,mD,GAdkBX,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ec04bf7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Welcome extends Component {\r\nrender() {\r\nreturn (\r\n<div>\r\n    <h2 id=\"welcomeText\">Welcome Page</h2>\r\n    <a href=\"/forgotpassword\">Forgot Password Page</a>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default Welcome;","import React, {Component} from 'react';\r\n\r\n\r\nclass Welcome extends Component {\r\nrender() {\r\nreturn (\r\n<div>\r\n    <h2 id=\"welcomeText\">Employee Page</h2>\r\n    <a href=\"/forgotpassword\">Forgot Password Page</a>\r\n    <hr/>\r\n    <a href=\"/\">Welcome Page</a>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default Welcome;","import React, {Component} from 'react';\r\n\r\n\r\nclass Welcome extends Component {\r\nrender() {\r\nreturn (\r\n<div>\r\n    <h2 id=\"welcomeText\">Forgot Password Page</h2>\r\n    <a href=\"/Employee\">Employee1</a>\r\n    <hr/>\r\n    <a href=\"/admin\">Administrator</a>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default Welcome;","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Welcome from \"./Welcome/Welcome\";\r\nimport Employee from \"./Employee/Employee\";\r\nimport ForgotPassword from \"./Employee/ForgotPassword\";\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n    <Switch>\r\n    <Route exact path=\"/\" component={Welcome}/>\r\n    <Route exact path=\"/welcome\" component={Welcome}/>\r\n    <Route exact path=\"/employee\" component={Employee}/>\r\n    <Route exact path=\"/forgotpassword\" component={ForgotPassword}/>\r\n    </Switch>\r\n    </BrowserRouter>\r\n    );\r\n    export default Routes;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Link } from \"react-router-dom\";\r\nimport  Routes from \"./Routes\";\r\n\r\nclass App extends Component {\r\nconstructor(){\r\nsuper();\r\nthis.state={\r\nappName: \"Performance Managment Process\",\r\nhome: false\r\n}\r\n}\r\nrender() {\r\nreturn (\r\n<div className=\"off-canvas-wrapper\">\r\n<h3>Header Section.</h3>\r\n<Routes />\r\n<hr/>\r\n<h3>Footer Section</h3>\r\n</div>\r\n\r\n);\r\n}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}